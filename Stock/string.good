page string in StockByGood

type string
{{
	A string is the unicode equivalent of an alpha\expr.

	strings have [eval] methods that mimic expr methods.
	They can be copied and evaluated, but not modified.

	There are 5 ways to create a string:
	
	(1) using a heap addr:

		string assumes ownership of addr.  If len is not
		specified, sequence must be delimited by a zero 
		char (aka "null-terminated").  This method is used
		by text objects to spawn strings.  Encoding must
		be specified.
	
	(2) from array of unicode characters:

		encoding must be specified

	(3) from ascii expr (literal):

		If encoding not specified, platform defaults are
		used.

	(4) from mediator

		heap mem is allocated for string; len and characters 
		are copied from mediated input data.  encoding is 
		copied from mediator.

	(5) copy another
	
		When a string is copied, all sub-objects are copied,
		but the	new string doesn't own the addr. 

}}
{
	general method
	{
		begin ( addr, utf, endian, int len [opt] )  -- encoded sequence
		{
		}

		begin ( <unicode>array arr, utf, endian )  -- encoded array
		{
		}

		begin ( expr, utf [opt], endian [opt] )  -- expr/literal conversion
		{
		}

		begin ( string other )  -- copy 
		{
		}


		begin ( mediator [upd], expr fex );	-- fread

		fwrite ( mediator [upd], expr fex ) ;


		get_endian ()( endian );

		get_utf ()( utf );


		is_equal? ( string other, int q [opt] )( bool ); 

		is_before? ( string other )( bool );

		measure ()( int );

		extract ( int i, int q )( string );	-- sub-expression

		extract ( int i )( unicode );	 -- one char 

		extract ( int i [opt], int q [opt] )( <unicode>array );  -- multiple chars

		find ( string other, int i [upd] )( bool );

		scan ( int i [upd] ) with stop? ( string, int i )( bool );
	}

	misc method
	{
		end
		{
			if ( "is_null?( io.addr )" ) return;
			if ( "not( io.owner )" ) return;
			kernel\heap_free( io.addr );
		}
	}


	instance
	{
		addr;
		utf;
		endian;
		int		len;
		bool	owner; 
	}
}
