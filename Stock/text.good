
page text in stock@good


enum type match_mode ( 'exact', 'similar', 'regex' );


subroutine
{
	exact_match? ( text pattern [upd], unicode c, sign d, expr fex )( bool yes )
	{{
		This coroutine works for all character sets. Pattern
		characters and input characters	are matched one-for-one
		exactly by code-point value.

		If output is null, the match is pending.
	}}
	{
		int code;
		if ( "d |=| 'positive'" )
			pattern:fread( fex )( code )
		else -- 'negative'
			pattern:get_rp()( int mark ):fread( fex )( code ):set_rp( mark ):dec_rp;
			
		if ( "code |not=| c:as_int" ) yes:begin( false )
		else if ( "rp_end?( pattern )" ) yes:begin( true );
	}


	similar_match? (( ucdb ))( text pattern [upd], unicode c, sign d, expr fex )( bool yes )
	{{
		This coroutine matches consecutive white-space in the 
		pattern to consecutive input white-space, and matches 
		pattern letters	to input letters regardless	of case.
	}}
	{
	}


	regex_match? (( ucdb ))( text pattern [upd], unicode c, sign d, expr fex )( bool yes )
	{
	}

}



type text from message
{{
	A text object is a pure text message.

	Text messages always contain "pure" text, meaning
	message data is always interpreted as a sequence of 
	UNICODE integer codes (code points) that represent
	characters. 

	In general, code point values are variable in length.
	There are 3 binary integer formats corresponding to
	the utf type associated with the message:

	'UTF-8'	 -> 'b:utf8'
	'UTF-16' -> 'b:utf16'
	'UTF-32' -> 'b:utf32'

	By default, text objects are encoded using the current
	modal message format, which is initially set to 
	platform-dependent values.  The initial modal format 
	can be set and reset by calling alpha\set_modal_message_
	format.

	In general, text messages originate from an external 
	source or they're synthetically composed by an 
	application. External sources are i/o devices like
	keyboards, files, and network portals. 

	Stock methods and subroutines always format new text
	messages using default modal settings.
	
	Some devices may require specific encodings when text
	is transferred as data.  However, most devices support 
	platform default text encoding to communicate control
	information.

	Text methods are designed to reduce the	tedium of 
	formatting, parsing, editing, and copying text messages. 
				
	In the type definition below, methods are grouped into
	these functional catagories:

	encoding
	copy with conversion
	channel input
	C str conversion
	synthesis (serial write)
	analysis (serial parse: read and skip )
	placement (serial seek)
	edit using compatible buffer
}}
{
	general method
	{
		begin ( utf f [opt], endian e [opt] )  -- original, empty
		{
			ao:base<message>:begin( e, f );
			describe_utf( f )( ao.code_unit, ao.code_fex );
		}

		begin ( text other [upd] )		-- var copy
		{
			other:get_encoding()( utf f, endian e );
			ao:base<message>:begin( e, f );

			describe_utf( f )( ao.code_unit, ao.code_fex );

			other:detach()( addr pmem, int size );
			ao:attach( pmem, size );
		}

		begin ( text other )			-- const copy
		{
			other:get_encoding()( utf f, endian e );
			ao:base<message>:begin( e, f );

			describe_utf( f )( ao.code_unit, ao.code_fex );

			ao:copy( other, zero ); -- all
			ao:set_wp( zero );
		}

		begin ( expr source )			-- expr conversion
		{
			-- pending
		}


		-- encoding

		get_encoding ()( utf f, endian e )
		{
			f:begin( ao:text_encoding );
			e:begin( ao:byte_order );
		}

		compatible? ( text other [opt] )( bool yes ) -- compare to platform if other null
		{
			utf proxy ~f;
			endian proxy ~e;
			if ( "null?( other )" )
			{
				~f -> platform_utf;
				~e -> platform_endian;
			}
			else
			{
				~f -> other:text_encoding;
				~e -> other:byte_order;
			}
			yes:begin( "ao:text_encoding |=| ~f" );
			if ( "not( yes )" ) return;
			yes:and( "ao:byte_order |=| ~e" );
		}

		make ()( text t )		-- compatible
		{
			t:begin( ao:text_encoding, ao:byte_order );
		}
		

		-- copy with conversion

		import [upd]( int q, message m [upd] )
		{
			describe_utf( m:text_encoding )( null, expr m_fex );
			ao:set_size( zero ):set_wp( zero );
			int q2:begin;
			loop ( "q2 |<| q" )
			{
				m:fread<int>( m_fex )( int n );
				ao:base<message>:fwrite<int>( n, ao.code_fex );
				q2:inc;
			}
		}

		export [upd]( message m [upd] )
		{
			describe_utf( m:text_encoding )( null, expr m_fex );
			ao:set_rp( zero );
			loop ( "not( rp_end?( ao ) )" )
			{
				ao:base<message>:fread<int>( ao.code_fex )( int n );
				m:fwrite<int>( n, m_fex );
			}
		}

		merge [upd]( text other [upd], int q [opt] )( int q2 )  -- using current pointers 
		{
			fix( q, int_max ) ~q;
			describe_utf( other:text_encoding )( null, expr other_fex );
			q2:begin;
			loop ( "( q2 |<| ~q ) |and| not( rp_end?( other ) )" )
			{
				other:base<message>:fread<int>( other_fex )( int n );
				ao:base<message>:fwrite<int>( n, ao.code_fex );
				q2:inc;
			}
		}


		-- channel input 
				
		reserve	[upd] -- first
		{{
			Call this method to reserve space at the end of a message
			for the first code unit of a char.  Immediately after reading
			the	first code unit, call the other reserve method to reserve 
			additional space for characters that are longer than one unit.
		}}
		{
			ao:get_size()( int size ):set_size( "size + ao.code_unit" );
		}

		reserve [upd]()( bool ok ) 
		{{
			Call this method immediately after reading the first code
			unit.  The first unit is assumed to be at the end of the 
			message.

			This method sets rp to read the presumed first unit, then
			calls a method to predict the new size based on the first 
			unit. If the character is more than one unit in length, 
			the new	size is set and ok will be true.  Otherwise, the 
			character is only one code unit long, and another read is 
			not necessary.
		}}
		{
			ao:get_size()( int size ):set_rp( "size - ao.code_unit" ):predict_next_rp()( int new_size ):set_rp( size ); 
			ok:begin( "new_size |>| size" );
			if ( ok ) ao:set_size( new_size );
		}


		-- C str conversion
		 
		add_zero [upd] 
		{
			ao:set_wp_end:write<int>( zero, ao.code_fex );
		}
		
		trim_zero [upd]
		{
			ao:set_rp( zero ):seek_chr<unicode>( zero, 'positive' ):set_size_rp;
		}
		
			
		-- synthesis (serial write)

		write [upd]( unicode c )
		{
			ao:write_chr( c );
		}
		
		write [upd]( ascii c )
		{
			ao:write_chr( c );
		}
				
		write [upd]( direct_access<unicode> s )
		{
			ao:write_str( s );
		}

		write [upd]( direct_access<ascii> s )
		{
			ao:write_str( s );
		}

		write<t> [upd]( serial_access<unicode><<t>> s )  -- <t> cursor type
		{
			ao:write_str( s );
		}
		
		write<t> [upd]( serial_access<ascii><<t>> s )  -- <t> cursor type
		{
			ao:write_str( s );
		}

		write [upd]( expr e ) 
		{
			ao:write_str( e:extract()( =array<ascii> ) );
		}

		write [upd]( text t ) -- compatible only
		{
			if ( "not( compatible?( ao, t ) )" ) quit fault ( 'bug', 'incompatible text' );
			ao:base<message>:copy( t, null, zero ); -- all
		}

		write [upd]( text t [upd] ) -- any encoding
		{
			if ( "compatible?( ao, t )" ) 
				ao:base<message>:copy( t, null, zero ); 
			else
				ao:merge( *t );
		}
			
		fwrite<t> [upd]( <t> x, expr fex [opt] )		-- single fex
		{
			fix( fex, 't' ) ~fex;	
			ao:base<message>:fwrite<t>( x, ~fex );
		}

		fwrite<t> [upd]( <t> x, expr fex [opt] )()( extra etc )  -- multiple fex
		{
			fix( fex, 't' ) ~fex;
			ao:base<message>:fwrite<t>( x, ~fex )()( etc );
		}
							
			
		-- analysis (serial parse, read and skip)

		read [upd]()( unicode c )
		{
			ao:read_chr()( c );
		}

		read [upd]()( ascii c )  
		{
			ao:read_chr( c );
		}

		read [upd]( int q )( array<unicode> s )
		{
			ao:read_str( q )( s );
		}

		read [upd]( int q )( array<ascii> s )  
		{
			ao:read_str( q )( s );
		}

		fread<t> [upd]( expr fex [opt] )( <t> x )	-- single fex
		{
			fix( fex, 't' ) ~fex;
			ao:base<message>:fread<t>( ~fex )( x );
		}

		fread<t> [upd]( expr fex [opt] )( <t> x )( extra etc ) -- multiple fex
		{
			fix( fex, 't' ) ~fex;
			ao:base<message>:fread<t>( ~fex )( x )( etc );
		}
				
		skip [upd]( expr pattern, match_mode [opt] )  -- strict (quits)
		{
			ao:copy_pattern( pattern )( text pattern2 );
			ao:skip( *pattern2, @given\match_mode );
		}
		
		skip [upd]( text pattern [upd], match_mode [opt] ) -- strict (quits)
		{
			fix( @given\match_mode, 'similar' ) ~mode;

			bool ok; int rp;
			select ( ~mode )
			{
				case ( 'exact' )   ao:skip( *pattern )( ok, null, rp ) with exact_match?;
				case ( 'similar' ) ao:skip( *pattern )( ok, null, rp ) with similar_match?;
				case ( 'regex' )   ao:skip( *pattern )( ok, null, rp ) with regex_match?;
			}
			if ( ok:not ) quit fault ( 'format', 'skip pattern mismatch' );
			ao:set_rp( rp );
		}

		skip [upd]( text pattern [upd] )( bool ok, int q, int rp )  -- general
		 with match? ( text pattern [upd], unicode, sign, expr fex )( bool )
		{
			if ( "not( compatible?( ao, pattern ) )" ) quit fault ( 'bug', 'incompatible pattern' );
			ao:match( *pattern, 'positive' )( ok, q, rp ) with match?;  
			if ( ok ) ao:set_rp( rp );
		}


		-- placement (serial seek)
					
		
		seek [upd]( int n )( int n2 )  -- number of chars, signed
		{
			n2:begin;

			if ( "n |>| zero" )
			{
				loop ( "( n2 |<| n ) |and| not( rp_end?( ao ) )" )
				{	
					n2:inc;
					ao:inc_rp;
				}
			}
			else if ( "n |<| zero" )
			{
				loop ( "( n2 |>| n ) |and| not( rp_end?( ao ) )" )
				{	
					n2:dec;
					ao:dec_rp;
				}
			}
		}
		
		seek [upd]( ascii c, sign d [opt] )( bool ok )
		{
			ao:seek_chr( c, d )( ok );
		}

		seek [upd]( unicode c, sign d [opt] )( bool ok )
		{
			ao:seek_chr( c, d )( ok );
		}

		seek [upd]( expr pattern, sign d [opt], match_mode [opt] )( int q ) -- q = chars matched (zero = no match)
		{
			ao:copy_pattern( pattern )( text pattern2 );
			ao:seek( *pattern2, d, @given\match_mode )( q );
		}

		seek [upd]( text pattern [upd], sign d [opt], match_mode [opt] )( int q ) -- q = chars matched (zero = no match)
		{
			fix( @given\match_mode, 'exact' ) ~mode;
			select ( ~mode  )
			{
				case ( 'exact' )   ao:seek( *pattern, d )( q ) with exact_match?;
				case ( 'similar' ) ao:seek( *pattern, d )( q ) with similar_match?;
				case ( 'regex' )   ao:seek( *pattern, d )( q ) with regex_match?;
			}
		}
			
		seek [upd]( text pattern [upd], sign d [opt] )( int q ) -- q = chars matched (zero = no match)
		 with match? ( text pattern [upd], unicode c, sign d, expr fex )( bool )
		{
			if ( "not( compatible?( ao, pattern ) )" ) quit fault ( 'bug', 'incompatible pattern' );
			fix( d, 'positive' ) ~d;
			loop 
			{
				ao:match( *pattern, ~d )( bool ok, q:reuse, int rp ) with match?;

				if ( ok ) return;
				if ( "null?( rp )" ) return after q:reuse:begin( zero );

				ao:set_rp( rp );  -- next unmatched char
			}
		}


		-- edit using compatible buffer  PENDING

		copy [upd]( int q )( text buf );

		delete [upd]( int q );
				
		insert [upd]( text buf [upd] ); 

		insert [upd]( unicode c );

		replace [upd]( int q, text buf [upd] );  -- more efficient than :delete(q):insert(t)

		replace [upd]( unicode c );
	
	}


	common word16  
	{
		xD800:begin( 'x:D800' ) [const];
		xDC00:begin( 'x:D800' ) [const];
		xDFFF:begin( 'x:DFFF' ) [const];
	}

	common word8
	{
		x80:begin( 'x:80' ) [const];
		x20:begin( 'x:20' ) [const];
		x10:begin( 'x:10' ) [const];
		xC0:begin( 'x:C0' ) [const];
	}

	common int
	{
		two:begin( '2' )   [const];
		three:begin( '3' ) [const];
		four:begin( '4' )  [const];
	}

	
	misc method
	{
		write_chr<t> [upd]( <t> c )  
		{
			c:fwrite( ao, 'code' )()( ao.code_fex );
		}

		write_str<t> [upd]( direct_access<<t>> s ) 
		{
			for ( ~c in s ) ~c:fwrite( ao, 'code' )()( ao.code_fex );
		}

		write_str<t><u> [upd]( serial_access<<t>><<u>> s ) 
		{
			for ( ~c in s ) ~c:fwrite( ao, 'code' )()( ao.code_fex );
		}

		read_chr<t> [upd]()( <t> c )
		{
			ao:base<message>:fread<int>( ao.code_fex )( int n );
			c:begin( n );
		}

		read_str<t> [upd]( int q )( array<t> s )
		{
			s:begin;
			int q2:begin( q );
			loop ( "( q2 |>| zero ) |and| not( rp_end?( ao ) )" ) 
			{
				ao:base<message>:fread<int>( ao.code_fex )( int n );
				s:insert:begin( n );
				q2:dec;
			}
		}

		copy_pattern [upd]( expr x )( text t )
		{
			if ( "x:length |=| zero" ) quit fault ( 'bug', 'no pattern' );  
			ao:make()( =t ):base<message>:fwrite<expr>( x, 't' );
		}
				

		match [upd]( text pattern [upd], sign d )( bool ok, int q, int rp ) 
		 with match? ( text pattern [upd], unicode c, sign d, expr fex )( bool ) 
		{{
			If sign is 'negative', pattern rp and message rp decrement. 
			Otherwise, sign is 'positive' and pattern rp and message rp 
			increment.

			Output ok is true if entire pattern is matched, otherwise false.

			Output q is number of matching chars, even when ok is false.

			Output rp points to "next" char before/after last matching 
			char, unless it's null. Null means scan reached the end.
			
			Message rp is retored to it's original position.  
		}}
		{
			if ( "d |=| 'positive'" ) pattern:set_rp( zero ) else pattern:set_rp_last;

			ao:get_rp()( int mark );
			q:begin;

			loop ( "not( rp_end?( ao ) )" )
			{
				unicode c;
				if ( "d |=| 'positive'" )
					ao:read_chr()( c )
				else
					ao:get_rp()( int mark2 ):read_chr()( c ):set_rp( mark2 ):dec_rp;

				match?( *pattern, c, d, ao.code_fex )( ok ); 
				if ( "not_null?( ok )" ) escape;

				q:inc; -- result pending
			}

			if ( "null?( ok )" ) ok:begin( false );
			else if ( ok ) q:inc; -- account for final match

			ao:get_rp()( rp ):set_rp( mark );
		}


		seek_chr<t> [upd]( <t> c, sign d [opt] )( bool ok ) 
		{
			if ( "rp_end?( ao )" ) return after ok:begin( false );
			fix( d, 'positive' as sign ) ~d;
			int cn ( c:as_int );
			if ( "~d |=| 'positive'" )
			{
				loop
				{
					ao:base<message>:fread<int>( ao.code_fex )( int n )
					if ( "n |=| cn" ) return after ok:begin( 'true' );
					if ( "rp_end?( ao )" ) return after ok:begin( 'false' );
				}
			}
			else
			{
				loop
				{
					ao:base<message>:get_rp()( int mark ):fread<int>( ao.code_fex )( int n );
					if ( "n |=| cn" ) return after ok:begin( 'true' );
					if ( "rp_end?( ao )" ) return after ok:begin( 'false' );
					ao:set_rp( mark ):dec_rp;
				}
			}
		}


		inc_rp [upd] -- next code point
		{
			ao:predict_next_rp()( int rp ):set_rp( rp );
		}


		dec_rp [upd] -- prev code point
		{{
			This method moves message rp one code point backward.  It 
			assumes rp is currently aligned on a code point.  If rp is
			initially zero, it "wraps" to the end.  This means that 
			rp_end? can be used to test limit in either direction.
		}}
		{
			ao:get_rp()( int rp ); 
			if ( "rp |=| zero" )
			{
				ao:set_rp_end;
			}
			else if ( "ao.code_unit |=| two" )
			{
				rp:sub( two );  -- prev code point
				ao:base<message>:set_rp( rp ):fread( 'b' )( word16 w );  
				if ( "(w |>=| xDC00 ) |and| ( w |<=| xDFFF )" ) rp:sub( two );  -- sub 2 more if surrogate
				ao:set_rp( rp ); 
			}
			else if ( "ao.code_unit |=| one" )
			{
				loop
				{
					rp:dec;
					ao:base<message>:set_rp( rp ):fread( 'b' )( word8 w ):set_rp( rp );
					if ( "( w |and| xC0 ) |not=| x80" ) escape;		-- if not 10xx xxxx
				}
			}
			else -- "ao.code_unit |=| four"
			{
				ao:set_rp( rp:sub( four ) ); 
			}
		}


		predict_next_rp [upd]()( int rp ) 
		{{
			This method predicts next properly aligned rp. It assumes 
			message rp is currently aligned and may move it one code 
			unit to evaulate next position.  Thus, message rp SHOULD
			ALWAYS BE REALIGNED after calling this method (using 
			predicted output rp or original message rp).
		}}
		{
			ao:get_rp()( rp ); 
			if ( "ao.code_unit |=| two" )
			{
				ao:base<message>:fread<word16>( 'b' )( word16 w );
				if ( "(w |<| xD800 ) |or| ( w |>| xDFFF )" )
					rp:add( two )
				else
					rp:add( four );
			}
			else if ( "ao.code_unit |=| one" )
			{
				ao:base<message>:fread<word8>( 'b' )( word8 w );
				if ( "w |<| x80" )					-- 0xxx xxxx
					rp:inc
				else if ( "zero?( w |and| x20 )" )	-- 110x xxxx
					rp:add( two )
				else if ( "zero?( w |and| x10 )" )	-- 1110 xxxx
					rp:add( three )
				else								-- 1111 0xxx
					rp:add( four );
			}
			else -- "ao.code_unit |=| four"
			{
				rp:add( four );
			}
		}
	}


	subroutine describe_utf ( utf )( int unit, expr fex )
	{
		select ( @given\utf )
		{	
			case ( 'UTF-8' ) 
			{
				unit:begin( one );
				fex:begin( 'b:utf8' );
			}

			case ( 'UTF-16' )
			{
				unit:begin( two );
				fex:begin( 'b:utf16' );  
			}

			case ( 'UTF-32' )
			{
				unit:begin( four );
				fex:begin( 'b:utf32' );	
			}
		}
	}


	instance
	{
		expr code_fex;	-- int fex
		int	 code_unit;	-- bytes
	}
				
}

