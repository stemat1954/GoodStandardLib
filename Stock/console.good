
page console in StockByGood


type console 
{{
	A console is an interactive peripheral that displays 
	text output and accepts text input from a user. 

	Console i/o text format is device specific. Applications
	must call :make_text to initialize a device compatible 
	output string.  Input strings are naturally device
	compatible.

	names and errors in method interfaces are platform 
	dependent.

	Note: In general, console i/o text format is different
	from platform text format. However, they're one and the
	same for system consoles.  Thus, the system console can
	always dispay error text.
}}
{
	general method
	{
		begin  -- system console
		{
			kernel\console_identify( no_addr, *handle hcon:begin );
			if ( "hcon |=| no_handle" ) quit with fault:begin( 'platform', 'no system console' );
			io:configure( hcon )( text err );
			if ( "is_not_null?( err )" ) quit with fault:begin( 'platform', 'system console broken' );
			io.ready:begin( true );
		}

		begin ( text name )( text error )  -- named console
		{
			text:begin( name ):add_zero:detach()( addr pname );
			kernel\console_identify( pname, *handle hcon:begin );
			kernel\heap_free( pname );

			if ( "hcon |=| no_handle" )
			{
				error:begin:write( 'unknown console: ' ):write( name );
				io.ready:begin( false );
			}
			else
			{
				io:configure( hcon )( error );
				io.ready:begin( "is_null?( error )" );
			}
		}


		make_text ()( text )  -- i/o compatible
		{
			if ( io.ready ) given\text:begin( io.utf, io.endian );
		}
	
				
		read [upd]( text input [upd], int q )( text error ) -- q chars
		{
			if ( io.ready )
				io.channel:read( *input, q )( error )
			else
				error:begin( not_ready );
		}

		read [upd]( text input [upd], unicode c )( text error ) -- delimiter c
		{
			if ( io.ready )
				io.channel:read( *input, c )( error )
			else
				error:begin( not_ready );
		}

		read_line [upd]()( text input, text error )
		{
			if ( io.ready )
			{
				io:make_text()( input );
				io.channel:read( *input, io.eol )( error );
			}
			else
				error:begin( not_ready );

		}

		write [upd]( text output [upd] )( text error )  
		{
			if ( io.ready )
				io.channel:write( *output )( error )
			else
				error:begin( not_ready );
		}

	}


	misc method
	{
		configure [upd]( handle hcon )( text err )
		{
			kernel\console_open_channel( hcon, *handle hch:begin, *addr pnote:begin );
			
			if ( "hch |not=| no_handle" )
			{
				io.channel:begin( hch ); 

				kernel\console_get_protocol( hcon, *int unit:begin, *word16 bom:begin, *int eol:begin );

				select ( unit )
				{
					value ( '1' ) io.utf:begin ( 'UTF-8' );
					value ( '2' ) io.utf:begin ( 'UTF-16' );
					value ( '4' ) io.utf:begin ( 'UTF-32' );
					else quit with fault:begin( 'bug', 'unexpected code unit value' );
				}

				if ( "bom |=| 'x:FEFF'" ) io.endian:begin ( 'big_endian' )
				else if ( "bom |=| 'x:FFFE'" ) io.endian:begin ( 'little_endian' )
				else if ( "bom |not=| 'x:0000'" ) quit with fault:begin( 'bug', 'invalid byte order mark' );

				io.eol:begin( eol );
			}
			else 
			{
				err:begin:write( 'could not open console channel [' );
				if ( "pnote |not=| no_addr" ) err:write( text begin:attach( pnote ):trim_zero );
				err:write( ']' );
			}
		}
	}

	nom type nom_channel = read_write_text_channel;

	common text not_ready:begin( 'not ready' ) [const];

	instance
	{
		nom_channel	channel	[opt];
		utf					[opt];
		endian				[opt];  -- n/a for UTF-8
		unicode		eol		[opt];
		bool		ready;
	}

}



