
page single_link_list in stock@good

{{
	on this page:

	type list_cursor
	type single_link_list
	type fifo_list<t>
	type lifo_list<t>

}}


type list_cursor
{
	general
	{
		begin ( linked<node1> ln [opt] )
		{
			if ( "not_null?( ln )" ) io.ln:begin( ln );
		}

		move [upd]
		{
			if ( "not_null?( io.ln )" ) 
			{
				io.ln:use:get_link()( linked<node1> next );
				io.ln:reuse;
				if ( "not_null?( next )" ) io.ln:begin( next );
			}
		}

		flip [upd]
		{
			io.ln:reuse;  -- not supported
		}

		use = node1 proxy ~n;
		{
			if ( "not_null?( io.ln )" ) ~n -> io.ln:use 
		}
	}

	instance
	{
		linked<node1> ln [opt];
	}
}


type single_link_list from serial_access<node1><list_cursor>
{{
	One-way linked list with heterogenous nodes.

	There are five named list positions: "front", "first",
	"last",	"current", and "next".  

	front is a nominal position before the first node.
	It always exists in principle.  The other positions
	designate nodes that may or may not exist.  If the 
	list has at least one node, first and last exist and
	are well-defined.  
	
	An internal link designates the current position. 
	
	Generally, the next node follows the current position.
	If the last node is current, the next node doesn't 
	exist.  If the front position is current, next refers 
	to the first node.

	The current node can be set using :go methods. 

	:go_front makes the front position current.
	
	:go_first makes the first node current if it exists.

	:go_last makes the last node current if it exists.

	:go_next makes the next node current if it exists.

	:go_here makes a given node current.  The given node
	link must reference a node in the list.  Use :get_next
	or :get_current to get a valid link.

	NOTE! This method can really screw things up if the
	link doesn't reference a node in the list.

	:insert and :remove_next are the essential methods 
	used to build a list.  

	:insert adds a node link after the current position.
	The current position doesn't change.  The given node 
	should be a new (unlinked) node, but the method clears
	the link just in case.

	NOTE! It's possible to re-insert (move) a node in the
	list if it's removed before reinserting.  Failure to
	properly unlink a node that was previously linked in
	the same (or any other) list will make a real mess of
	things.

	:remove_next removes the next node from the list if it
	exists. It does this by linking the current node to 
	the node after the next node, if it exists.  current 
	position doesn't change.
	
	A [const] list can be traversed using :get methods.
	:get methods copy a named link if it exists.  If
	:get_current doesn't copy a link (output is null), the
	list is empty and the front position is current.
}}
{
	general method
	{
		begin  -- original empty
		{
			io:base<serial_access<node1><linked<node1>>:begin;
		}

		begin ( single_link_list other [upd] )  -- var copy 
		{
			if ( "not_null?( other.first )" )
			{
				-- ignore current in other
				io.first:begin( other.first );  
				io.last:begin( other.last );
				other.first:reuse;
				other.last:reuse;
				other.current:reuse;  -- go front
			}
		}

		is_empty? ()( bool yes )
		{
			io.first:null?()( yes );
		}

		go_front [upd]  -- before first
		{
			io.current:reuse;
		}

		go_first [upd]
		{
			if ( "not_null?( io.first )" ) io.current:reuse:begin( io.first );
		}

		go_last [upd]
		{
			if ( "not_null?( io.last )" ) io.current:reuse:begin( io.last );
		}

		go_next [upd]
		{
			if ( "null?( io.current )" )
			{
				if ( "not_null?( io.first )" ) io.current:reuse:begin( io.first );
			}
			else
			{
				io.current:use[const]:get_link()( linked<node1> ln ); 
				if ( "not_null?( ln )" ) io.current:reuse:begin( ln );
			}
		}

		go_here [upd]( linked<node1> ln )  
		{
			io.current:reset:begin( ln );
		}
		
		
		get_first ()( linked<node1> ln )
		{
			if ( "not_null?( io.first )" ) ln:begin( io.first );
		}

		get_last ()( linked<node1> ln )
		{
			if ( "not_null?( io.last )" ) ln:begin( io.last );
		}

		get_current ()( linked<node1> ln )
		{
			if ( "not_null?( io.current )" ) ln:begin( io.current );
		}

		get_next ()( linked<node1> ln ) 
		{
			if ( "not_null?( io.current )" ) io.current:use[const]:get_link()( ln );
		}


		insert [upd]( linked<node1> ln )  -- after current  
		{
			ln:use:unlink;  -- just in case
			if ( "not_null?( io.current )" )  
			{
				-- after current
				io.current:use:get_link()( linked<node> before ):set_link( ln ); 
				if ( "null?( before )" )
					io.last:reuse:begin( ln )
				else
					ln:use:set_link( before );
			}
			else if ( "not_null?( io.first )" )
			{
				-- front (before first)
				ln:use:set_link( io.first );
				io.first:reuse:begin( ln );
			}
			else 
			{
				-- first and only node
				io.first:begin( ln );
				io.last:begin( ln );
			}
		}
	
		remove_next [upd]
		{
			if ( "not_null?( io.current )" ) 
			{
				-- node after current
				io.current:use:get_link()( linked<node1> next );
				if ( "not_null?( next )" ) 
				{
					next:use:get_link()( linked<node1> next_next ):unlink;
					if ( "null?( next_next )" )
						io.last:reuse:begin( io.current ) -- new last
					else 
						io.current:use:set_link( next_next );
				}
			}
			else if ( "not_null?( io.first )" ) 
			{
				-- first node
				io.first:use:get_link()( linked<node> next_next ):unlink;
				if ( "null?( next_next )" )
				{
					-- list is empty now
					io.first:reuse;
					io.last:reuse;
				}
				else
				{
					io.first:reuse:begin( next_next );  -- new first
				}
			}
		}
	}


	general method  -- typed nodes: complete <t> derived from node1
	{
		insert<t> [upd] with make ()( <t> )  -- after current
		{
			linked<node1> ln:begin<<t>>;
			make()( ln:use:as_actual<<t>> );
			io:insert( ln );
		}
		
		copy_next_eval<t> ()( <t> next )  -- null possible
		{
			io:get_next()( linked<node1> ln );
			if ( "not_null?( ln )" ) next:begin( ln:use:as<<t>> );
		}

		copy_next_upd<t> ()( <t> next )  -- null possible
		{
			io:get_next()( linked<node1> ln );
			if ( "not_null?( ln )" ) next:begin( *ln:use:as<<t>> );
		}

		current<t> = <t> proxy [init] ~n   -- void possible
		{
			if ( "not_null?( io.current )" ) ~n -> io.current.use:as_actual<<t>>;
		}
	}


	abstract in serial_access<node1><list_cursor>
	{
		[final] ~open_cursor ( int step )( list_cursor c )
		{	
			if ( "step |=| one" ) c:begin( io.first ) else c:begin;
		}  

		[final] ~move_cursor ( list_cursor c [upd] )
		{
			c:move;
		}

		[final] ~flip_cursor ( list_cursor c [upd] )
		{
			c:flip;
		}

		[final] ~use ( list_cursor c ) = node1 proxy ~o   
		{
			~o -> c:object;
		}
	}
	
	instance
	{
		linked<node1> first   [opt];
		linked<node1> last    [opt];
		linked<node1> current [opt];  
	}
	
}


type lifo_list<t> from single_link_list  -- typed stack
{{
	<t> derived from node1

	insert (push) and remove (pull) where front node is
	always current.

	NOTE!  Implementation assumes current node starts at
	front and doesn't change.  Application must restore
	current node if base methods are called. 

	Example usage:

	nom type thing_stack = lifo_list< <thing>node1 >;

	suboutine init_thing (( int, int, int ))()( thing );

	thing_stack my_stack:begin;

	my_stack:push<thing> with init_thing (( a, b, c ));

	my_stack:pull_const()( thing t );
	my_stack:pull_var()( thing t );
	my_stack:pull;
	
}}
{
	general method
	{
		begin
		{
			io:base<single_link_list>:begin;
		}

		push with make ()( <t> node )
		{
			io:insert with make ()( node );  
		}

		pull_eval [upd] ()( <t> node )  -- eval copy
		{
			io:copy_next_eval()( node ):remove_next;
		}

		pull_upd [upd] ()( <t> node )  -- upd copy
		{
			io:copy_next_upd()( node ):remove_next;
		}

		pull [upd] -- no copy
		{
			io:remove_next;
		}
	}
}


type fifo_list<t> from single_link_list  -- typed queue
{{
	<t> derived from node1

	insert last node (push) and remove first node (pull).

	Example usage:

	nom type thing_queue = fifo_list< <thing>node1 >;

	suboutine init_thing (( int, int, int ))()( thing );

	thing_queue my_queue:begin;
	my_queue:push<thing> with init_thing (( a, b, c ));
	my_queue:pull_eval()( thing t );
	my_queue:pull_upd()( thing t );
	my_queue:pull;
	
}}
{
	general method
	{
		begin
		{
			io:base<single_link_list>:begin;
		}

		push [upd] with make ()( <t> node )
		{
			io:go_last:insert with make ()( node );  
		}

		pull_eval [upd] ()( <t> node )  -- eval copy
		{
			io:go_front:copy_next_eval()( node ):remove_next;
		}

		pull_upd [upd] ()( <t> node )  -- upd copy
		{
			io:go_front:copy_next_upd()( node ):remove_next;
		}

		pull [upd]  -- no copy
		{
			io:go_front:remove_next;
		}
	}
}




