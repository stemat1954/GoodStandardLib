
page single_link_list in StockByGood

{{
	types on this page:

	node1_cursor
	single_link_list
	<nt>lifo_list	
	<nt>fifo_list	
}}


type node1_cursor
{{
	cursor is inoperable if io.link is null.

	Note:  the cursor itself is not null.
}}
{
	nom type link = smp<node1>;

	general
	{
		begin ( link [opt] )
		{
			if ( "is_not_null?( given\link )" ) io.link:begin( given\link );
		}

		move [upd]
		{
			if ( "is_not_null?( io.link )" ) 
			{
				io.link:use_object:get_link()( link next );
				io.link:reuse;
				if ( "is_not_null?( next )" ) io.link:begin( next );
			}
		}

		flip [upd]  -- not supported
		{
			io.link:reuse;  
		}

		use_node = node1 proxy  ~n
		{
			if ( "is_not_null?( io.link )" ) ~n -> io.link:use_object; 
		}
	}

	instance
	{
		link [opt];
	}
}


type single_link_list from serial<node1><node1_cursor>
{{
	One-way linked list with heterogenous nodes.

	There are five named list positions: "front", "first",
	"last",	"current", and "next".  

	front is a nominal position before the first node.
	It always exists in principle.  The other positions
	designate nodes that may or may not exist.  If the 
	list has at least one node, first and last exist and
	are well-defined.  
	
	Generally, the next node follows the current position.
	If the last node is current, the next node doesn't 
	exist.  If the front position is current, next refers 
	to the first node.

	The current node can be set using :go methods. 

	:go_front makes the front position current.
	
	:go_first makes the first node current if it exists.

	:go_last makes the last node current if it exists.

	:go_next makes the next node current if it exists.

	:go_here makes a given node current.  The given node
	link must reference a node in the list.  Use :get_next
	or :get_current to get a valid link.

	NOTE! This method can really screw things up if the
	link doesn't reference a node in the list.

	:insert and :remove_next are the essential methods 
	used to build a list.  

	:insert adds a node link after the current position.
	The current position doesn't change.  The given node 
	should be a new (unlinked) node, but the method clears
	the link just in case.

	NOTE! It's possible to re-insert (move) a node in the
	list if it's removed before reinserting.  Failure to
	properly unlink a node that was previously linked in
	the same (or any other) list will make a real mess of
	things.

	:remove_next removes the next node from the list if it
	exists. It does this by linking the current node to 
	the node after the next node, if it exists.  current 
	position doesn't change.
	
	A constant list can be traversed using [eval] :get
	methods.  :get methods copy a named link if it exists.  
	Once a named link is copied, the list is traversed by
	calling 

		link:use:get_link()( link next )

	until next is null.

	Type dependent methods are provided in a seperate group.
	Most of them work with a given coroutine allowing for
	generic subtypes that compile with any type provided a
	proper coroutine can be given for the method and node 
	type.

	Note: standard coroutines make calling these methods
	straight forward.
}}
{
	nom type link = smp<node1>;

	general method
	{
		begin  -- original empty
		{
			io:base<serial<node1><node1_cursor>>:begin;
		}

		begin ( single_link_list other [upd] )  -- take 
		{
			if ( "is_not_null?( other.first )" )
			{
				-- ignore current in other
				io.first:begin( other.first );  
				io.last:begin( other.last );
				other.first:reuse;
				other.last:reuse;
				other.current:reuse;  -- go front
			}
		}

		is_empty? ()( bool yes )
		{
			io.first:is_null?()( yes );
		}

		go_front [upd]  -- before first
		{
			io.current:reuse;
		}

		go_first [upd]
		{
			if ( "is_not_null?( io.first )" ) io.current <= io.first;
		}

		go_last [upd]
		{
			if ( "is_not_null?( io.last )" ) io.current <= io.last;
		}

		go_next [upd]
		{
			if ( "is_null?( io.current )" )
			{
				if ( "is_not_null?( io.first )" ) io.current <= io.first;
			}
			else
			{
				io.current:use_object:get_link()( link nl ); 
				if ( "is_not_null?( nl )" ) io.current <= nl;
			}
		}

		go_here [upd]( link )  
		{
			io.current <= given\link;
		}
		
		
		get_first [eval]()( link )
		{
			if ( "is_not_null?( io.first )" ) given\link:begin( io.first );
		}

		get_last [eval]()( link )
		{
			if ( "is_not_null?( io.last )" ) given\link:begin( io.last );
		}

		get_current [eval]()( link )
		{
			if ( "is_not_null?( io.current )" ) given\link:begin( io.current );
		}

		get_next [eval]()( link ) 
		{
			if ( "is_not_null?( io.current )" ) io.current:use_object:get_link()( given\link );
		}


		insert [upd]( link )  -- after current  
		{
			given\link:use_object[upd]:unlink;  -- just in case
			if ( "is_not_null?( io.current )" )  
			{
				-- after current
				io.current:use_object:get_link()( link before ):set_link( given\link ); 
				if ( "is_null?( before )" )
					io.last <= given\link 
				else
					given\link:use_object[upd]:set_link( before );
			}
			else if ( "is_not_null?( io.first )" )
			{
				-- front (before first)
				given\link:use_object[upd]:set_link( io.first );
				io.first <= given\link;
			}
			else 
			{
				-- first and only node
				io.first:begin( given\link );
				io.last:begin( given\link );
			}
		}
	
		remove_next [upd]
		{
			if ( "is_not_null?( io.current )" ) 
			{
				-- node after current
				io.current:use:get_link()( link next );
				if ( "is_not_null?( next )" ) 
				{
					next:use_object[upd]:get_link()( link next_next ):unlink;
					if ( "is_null?( next_next )" )
						io.last <= io.current -- new last
					else 
						io.current:use_object[upd]:set_link( next_next );
				}
			}
			else if ( "is_not_null?( io.first )" ) 
			{
				-- first node
				io.first:use_object[upd]:get_link()( link next_next ):unlink;
				if ( "is_null?( next_next )" )
				{
					-- list is empty now
					io.first:reuse;
					io.last:reuse;
				}
				else
				{
					io.first <= next_next;  -- new first
				}
			}
		}
	}


	general method  -- typed node <nt> must derive from node1
	{
		insert<nt> [upd] with node_initializer ()( <nt> )  -- after current
		{
			node_initializer()( link nl:begin<<nt>> );
			io:insert( nl );
		}
		
		copy_next<nt> [eval]()( <nt> node ) with node_copier ( <nt> )( <nt> )
		{
			io:get_next()( link next );
			if ( "is_not_null?( next )" ) node_copier ( next:use_object:as<<nt>> )( node );
		}

		take_next<nt> [upd] ()( <nt> node ) with node_taker ( <nt> [upd] )( <nt> ) 
		{
			io:get_next()( link next );
			if ( "is_not_null?( next )" ) node_taker( *next:use_object:as<<nt>> )( node );
		}
	}


	abstract in serial<node1><node1_cursor>
	{
		[final] ~open_cursor ( int step )( node1_cursor c )
		{	
			if ( "step |=| one" ) c:begin( io.first ) else c:begin;
		}  

		[final] ~move_cursor ( node1_cursor c [upd] )
		{
			c:move;
		}

		[final] ~flip_cursor ( node1_cursor c [upd] )
		{
			c:flip;
		}

		[final] ~use_object ( node1_cursor c ) = node1 proxy ~node   
		{
			~node -> c:use_node;
		}
	}
	
	instance
	{
		link first   [opt];
		link last    [opt];
		link current [opt];  
	}

}



type <nt>lifo_list from single_link_list  -- typed stack
{{
	<nt> derived from node1

	push (insert) front node
	pull (remove) front node
	
	NOTE!  Implementation assumes current node starts at
	front and doesn't change.  Application must restore
	current node if base methods are called. 

	:begin with copy and :pull with transfer require a
	type-dependent coroutine.

	Example:

	type thing from node1;
	<thing>lifo_list my_stack ( other_stack ) with std_copy<thing>;
	my_stack:pull()( thing next ) with std_take<thing>;
	my_stack:pull()( thing next ) with std_copy<thing>;

}}
{
	general method
	{
		begin --empty
		{
			io:base<single_link_list>:begin;
		}

		begin ( <<nt>>lifo_list other [upd] )  -- take 
		{
			io:base<single_link_list>:begin( *other );
		}

		begin ( <<nt>>lifo_list other ) with node_copier ( <nt> )( <nt> )
		{
			io:base<single_link_list>:begin;
			for ( ~node in other )
			{
				node_copier( ~node )( <<nt>>link nl:begin );
				io:insert( nl ):go_next;
			}
		}

		push [upd] with node_initializer ()( <nt> node )
		{
			io:insert<<nt>> with node_initializer;  
		}

		pull [upd]()( <nt> node ) with node_copier ( <nt> )( <nt> )
		{
			io:copy_next()( node ) with node_copier;
			io:remove_next();
		}

		pull [upd]()( <nt> node ) with node_taker ( <nt> [upd] )( <nt> )
		{
			io:take_next()( node ) with node_taker;
			io:remove_next();
		}

		pull [upd] -- no transfer
		{
			io:remove_next;
		}
	}
}




type <nt>fifo_list from single_link_list  -- typed queue
{{
	<nt> derived from node1

	push (insert) last node
	pull (remove) first node

	:begin with copy and :pull with transfer require a 
	type-dependent coroutine.
}}
{
	general method
	{
		begin -- empty
		{
			io:base<single_link_list>:begin;
		}

		begin ( <<nt>>fifo_list other [upd] )  -- take 
		{
			io:base<single_link_list>:begin( *other );
		}
				
		begin ( <<nt>>fifo_list other ) with node_copier ( <nt> )( <nt> )
		{
			io:base<single_link_list>:begin;
			for ( ~node in other )
			{
				node_copier( ~node )( <<nt>>link nl:begin );
				io:insert( nl ):go_next;
			}
		}

		push [upd] with node_initializer ()( <nt> node )
		{
			io:go_last:insert with node_initializer;
		}

		pull [upd]()( <nt> node ) with node_copier ( <nt> )( <nt> )
		{
			io:go_front:copy_next()( node ) with node_copier;
			io:remove_next;
		}

		pull [upd]()( <nt> node ) with node_taker ( <nt> [upd] )( <nt> )
		{
			io:go_front:take_next()( node ) with node_taker;
			io:remove_next;
		}

		pull [upd]  -- no transfer
		{
			io:go_front:remove_next;
		}
	}
}




