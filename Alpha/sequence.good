
page sequence in AlphaByGood

type <t>sequence<c> [incomplete] -- intrinsic
{{
	<t>sequence<c> is a base type for generic object 
	collections that can be accessed sequentially.
		
	<t> is the symbolic object type and <c> is the symbolic 
	cursor type. 
	
	Collections that derive from <t>sequence<c> manage an
	ordered set of objects where individual objects are
	accessed in serial order using a bespoke cursor.

	Access to a sequence starts by opening a cursor	
	positioned at either end of the sequence. The cursor
	moves toward the other end in increments or steps.  A 
	positive or negative step determines direction and 
	resolution of the cursor. 
	
	Generally, a sequence cursor must have a final inoper-
	able state that doesn't provide access to any object. 
	The inoperable state must be distinguishable from null
	and an inoperable cursor must be accepted by all methods.

	:open_cursor( step ) creates an original cursor placed 
	at either end of the sequence.  If step is positive, the 
	cursor is placed on the first object and moves toward
	the last.  If step is negative, the cursor is placed on 
	the last object and moves toward the first.  step = 0 
	is invalid.  The default step is one.

	Note: If a sequence doesn't support step < 0 or 
	|step|> 1,  the output cursor is inoperable.

	:move_cursor updates the position of a given cursor.
	
	:flip_cursor reverses the direction of a given cursor.

	Note: If a cursor can't be flipped, the cursor will 
	become inoperable.

	:use_object returns access to the object referenced by 
	a given cursor. If the cursor is inoperable, the proxy
	will be void.

	A sequence can be scanned in a Good for loop.
}}
{
	general
	{
		begin;

		open_cursor ( int step [opt] )( <c> );

		move_cursor ( <c> [upd] );

		flip_cursor ( <c> [upd] );

		use_object ( <c> ) = <t> proxy;
	}


	abstract  
	{
		~open_cursor ( int )( <c> );  

		~move_cursor ( <c> [upd] );

		~flip_cursor ( <c> [upd]);

		~use_object ( <c> ) = <t> proxy; 
	}

}



