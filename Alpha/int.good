
page int in AlphaByGood


type int -- elementary, compatible, conventional
{{
	An int encapsulates the higest precision integer
	type supported by the runtime platform.

	See documentation for initial value expressions.

	[upd] methods that change value also have [eval] 
	functional equivalents that don't.




	An int is portable. See documentation for supported
	formats.

	Format notes...  

	Generic binary 'b' is supported for c compatability.

	Specific binary formats include 3 common encodings
	that differ in negative value representation (one's
	complement, two's complement, and sign/magnitude).

	Specific binary unicode formats UTF-8, UTF-16, and
	UTF-32 are also supported. For now, presume format 
	exprs are 'b:utf8', 'b:utf16', 'b:utf32'.  
			
	https://en.wikipedia.org/wiki/UTF-8
	https://en.wikipedia.org/wiki/UTF-16

	Specific binary 'b:ascii' writes a non-negative
	value as one byte and reads the same.

}}
{
	general 		
	{
		begin ( expr vex [opt] );				-- value expr, default '0'

		begin ( int other );					-- copy

		begin<#n> ( word<<#n>> w, expr fex );	 -- word conversion

		
		begin ( mediator [upd], expr fex );		-- mediation

		store ( mediator [upd], expr fex );		-- ditto


		is_equal? ( int n )( bool );			-- equality
				
		is_before? ( int n )( bool );			-- ordinality ( same as is_less? )

		is_less? ( int n )( bool );				-- cardinality ( same as is_before? )

	
		set [upd]( int n );						-- v <= n (intrinsic assign)

		add [upd]( int n );						-- v <= v + n  (add)
		add [eval] ( int n )( int x );			

		sub [upd]( int n );						-- v <= v - n  (subtract)
		sub [eval] ( int n )( int x );

		mul [upd]( int n );						-- v <= v * n  (multiply)
		mul [eval] ( int n )( int x );	

		div [upd]( int n );						-- v <= v \ n (divide and round-in)
		div [upd]( int n )( int r );			-- v <= v \ n, r <= mod(v,n) 
		div [eval]( int n )( int x, int r );	-- x <= v \ n, r <= mod(v,n)

		mod [upd]( int n );						-- v <= residual of v \ n (modulo)
		mod [eval]( int n )( int x );	

		pow [upd]( int n );						-- v <= v ^ n (power)
		pow [eval]( int n )( int x );

		fma [upd]( int m, int b );				-- v <= m * v + b (fused mul add, linear transform)
		fma [eval]( int m, int b )( int x );

		dis [upd]( int n );						-- v <= | v - n | (distance, absolute diff)
		dis [eval]( int n )( int x );

		neg [upd];								-- v <= -v  (negate)
		neg [eval]()( int x );

		abs [upd];								-- v <= |v| (absolute value)
		abs [eval]()( int x );	

		sgn [upd];								-- v <= (-1,0,1) (sign)
		sgn [eval]()( int x );

		inc [upd];								-- v <= v + 1 (increment)
		inc [eval]()( int x );	

		dec [upd];								-- v <= v - 1 (decrement)
		dec [eval]()( int x );

		inf [upd];								-- v <= v + sgn(v) (inflate)
		inf [eval]()( int x );

		def [upd];								-- v <= v - sgn(v) (deflate)
		def [eval]()( int x );
	}
}









