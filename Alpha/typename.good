
page typename in alpha@good


subroutine typename<t>()( typename );


type typename -- intrinsic
{{
	A typename is a type identification object.

	The binding of a typename to a type definition is 
	consistent such that any type named t on a page
	named p and a book named b will always have the 
	same typename.  
		
	Although representation is not defined, clearly a
	type name includes the type's defined name as well
	as a book and page name.

	Original typenames can be copied from any object 
	by calling universal method :typename.

	A typename is portable.  An exported typename 
	identifies the same type across sessions provided
	an application maintains the same book, page, and
	basic type names.

	The application must ensure that imported typenames
	correctly associate to type	definitions in the
	current application.

	Note:  Clearly typenames can't survive every possible
	evolution of an application.  In general, if a portable
	app type uses typenames to store content, it should also 
	use version specific format expressions that can
	distinguish different typenames by version.

	typenames can be ordered to faciliate lookup.
}}
{
	general
	{
		begin ( typename other );				-- copy

		begin ( message [upd], expr fex );		-- fread

		fwrite ( message [upd], expr fex );

		is<t>? ()( bool );			-- iff actual <t>

		equal? ( typename other )( bool );

		before? ( typename other )( bool );
	}
}

