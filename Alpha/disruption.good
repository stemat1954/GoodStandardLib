
page disruption in AlphaByGood


type disruption from random_access<trace>  -- intrinsic, restricted
{{
	A disruption is a uniform collection of trace objects.

	A global disruption object is automatically created 
	when an application quits during normal execution. It
	persists until the disruption is resolved by exiting a
	a trap block.

	Every time an application quits, a trace is added to 
	the internal disruption object. 

	Note:  See alpha\trace for details.
		
	The current disruption list can only be referenced 
	from a trap block using proxy alias ~disruption.  This 
	alias only exists in the local scope of a trap block 
	and all the usual proxy rules apply. The disruption	
	proxy has [eval] permission which implies that individual
	trace proxies also have [eval] permission.

	Trace objects occur in quit order.  Thus, the original
	trace is first (index = 0).  The first trace always
	exists, but trying to access a trace that doesn't exist
	will return a void proxy.
	
	A disruption is not portable. 
}}
{
	general  -- similar in random_access<trace>
	{
		count ()( int );

		use_trace ( int i ) = trace proxy [eval]; 
	}

	abstract in random_access<trace>
	{
		[final] ~count ()( int n );

		[final] ~use_object ( int i ) = object proxy;
	}
}