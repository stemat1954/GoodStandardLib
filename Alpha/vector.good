
page vector in AlphaByGood


type vector<t><#>
{{
	algebraic vector.
	
	<#> coordinates
	
	numeric type <t> = int,	fp2, fp10
}}
{
	nom type vector_tn = vector<<t>><<#>>;

	general method
	{
		begin;										-- zero vector

		begin ( <t> x, <t> y, <t> z [opt], <t> w [opt] )()( extra );  -- coordinate list

		begin ( array<<t>><<#>> );					-- coordinate array

		begin ( vector_tn other );					-- copy

		begin<u><#n> ( vector<<u>><<#n>> other );	-- conversion 


		begin ( mediator m [upd], expr fex )()( extra );	-- mediation

		store ( mediator m [upd], expr fex )()( extra );	-- mediation

	
		is_equal? ( vector_tn v )( bool );

		is_zero? ()( bool );


		set_coord [upd]( int i, <t> n );

		get_coord [eval]( int i )( <t> n );

		use_coord [eval]( int i ) = <t> proxy [eval,init];

		get_coords [eval]()( array<<t>><<#>> );			


		add [upd]( vector_tn v );					-- io <= io + v (add)
		add [eval]( vector_tn v1 )( vector_tn v2 );

		sub [upd]( vector_tn v );					-- io <= io - v (subtract)
		sub [eval]( vector_tn v1 )( vector_tn v2 );

		mul [upd]( <t> n );							-- io <= io * n (multiply)
		mul [eval]( <t> n )( vector_tn v );

		div [upd]( <t> n );							-- io <= io / n (divide)
		div [eval]( <t> n )( vector_tn v ); 

		neg [upd];									-- io <= -io (negate)
		neg [eval]()( vector_tn v );

		dot [eval]( vector_tn v [opt] )( <t> n );	 -- n <= io . v (dot product) default = self-dot
	}

}

