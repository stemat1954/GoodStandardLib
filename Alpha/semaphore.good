
page semaphore in alpha@good

type semaphore
{{
	Classic counting semaphore.

	Semaphores are used to synchronize concurrent threads.
	Methods are atomic and thread-safe.  Semaphore methods 
	don't yield or time-out like corresponding indicator
	and lock methods.

	Note: implementations use platform-dependent inter-
	locked variable functions. 

	A semaphore has an internal int counter that has a 
	value between zero and some configurable max.
	
	:begin sets the initial and max counter values. The
	initial value n must be in range 0 <= n <= max. 

	Two verions of :add update the counter value by a given 
	amount. The amount is signed and zero is superfluous. 
	Both methods enforce the counter value so that it 
	remains in it's configured range.

	:add_wait "spins" in a loop until the counter can be
	successfully updated. 

	Note:  If the app's inter-thread protocol is flawed, 
	:add_wait may never return.

	:add_no_wait tries once to update the counter and 
	returns with an indication. A false indication means
	the new value would exceed the counter's configured
	range.
	
	A semaphore can be used to implement various kinds of
	locks, signals, and counters.  Information is readily
	available online.  Generally, synchronization patterns
	pair methods so that one method waits to add while
	another doesn't wait in opposition (coordination).

	binary signal:

		s:begin( false );			-- initially false
		s:add_wait( negative );		-- one thread waits for true to set false
		s:add_no_wait( positive );  -- another thread sets true (ignore output, may already be true)

	binary lock:

		l:begin( false );			-- initially false
		l:add_wait( positive );		-- one thread waits for false to set true
		l:add_no_wait( negative );	-- same thread sets false (ignore output, always works)

	resource count:

		x:begin( zero );			-- initally zero with no configured max
		x:add_wait( negative );		-- consumer thread waits for non-zero to consume one
		x:add_no_wait( positive );	-- provider thread provides one resource (ignore output, assume ok)
	

	See stock\toggle for a standard binary semaphore.
}}
{
	general
	{
		begin ( int n, int max [opt] );  -- default = int_max
				
		add_wait [upd]( int n );		

		add_no_wait [upd]( int n )( bool );
	}
}



