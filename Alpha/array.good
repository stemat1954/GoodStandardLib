
page array in AlphaByGood


nom type array_cursor = <'2'><int>tuple;


type <t>array from ( indexed<<t>>, serial<<t>><array_cursor> ) -- compatible and conventional per <t>
{{
	An array<t> is a resizable object set.  Objects are
	uniform and logically contiguous in memory.

	<t> is the symbolic object type. The adhoc type must
	be a complete type.  
		
	Methods that require a given index quit if the index is
	invalid. A valid index is between zero and count
	(inclusive).  index = count is a valid insertion index.

	If given index is valid, :insert always works provided 
	there is available memory, and :delete always works by 
	ignoring attempts to remove too many objects.

	Note: delete without an index (default) when array is
	empty doesn't do anything.

	Inserting and deleting at the end of an array is most
	efficient.

	An array can be configured from any type <t> but some
	methods can only be called with a type dependent co-
	routine.  See stock dialect for standard coroutines.

	Note: This technique verifies type compatibility and
	adds flexibility.

	An array cursor is bidirectional and represented by
	a pair of ints.  One int carries the current position,
	while the other carries step.  If step is zero, the 
	cursor is inoperable.
}}
{
	nom type t_array = <<t>>array;

	general method 
	{
		begin ( int reserve [opt] ); 

		begin ( t_array other [upd] );		-- take other

		insert [upd]( int i, int q );		-- q null objs at i

		insert [upd]( int i [opt] ) = <t> proxy [init];  -- one null obj at i (end), return access

		delete [upd]( int i, int q );		-- q objs at i

		delete [upd]( int i [opt] );		-- one obj at i (end)
				
		resize [upd]( int q );				-- insert or delete at end, new count = q

		shrink [upd];						-- release unused memory
	}
	
	general method -- similar in indexed<<t>>
	{
		count ()( int );  

		use_object ( int i ) = <t> proxy [eval,init];
	}

	general method  -- <t> dependent with coroutine
	{
		begin ( t_array other ) with copy ( <t> )( <t> );
		begin ( message [upd], expr fex ) with reader ( message [upd], expr fex )( <t> );	
		begin ( message [upd], expr fex )()( extra ) with reader ( message [upd], expr fex )( <t> )( extra ); 

		fwrite [eval]( message [upd], expr fex ) with writer ( message [upd], expr fex, <t> );
		fwrite [eval]( message [upd], expr fex )()( extra ) with writer ( message [upd], expr fex, <t> )()( extra );

		import [upd]( int i [opt], int q [opt], t_array other, int j [opt] ) with copier ( <t> )( <t> );			-- import with copier: q (1) objs to i (end) from other at j (0)
		import [upd]( int i [opt], int q [opt], t_array other [upd], int j [opt] ) with taker ( <t> [upd] )( <t> );	-- import with taker: ditto

		export [eval]( int i [opt] )( <t> obj ) with copier ( <t> )( <t> );			-- export with copier: one obj at i (end) to obj
		export [upd]( int i [opt] )( <t> obj ) with taker ( <t> [upd] )( <t> );		-- export with taker: ditto 

		rank [eval]( <t> )( int i, bool unique ) with sorter ( <t> a, <t> b )( bool ); -- find ordered insertion point
	}

	abstract method in indexed<<t>>
	{
		[final] ~count ()( int n );
		
		[final] ~use_object ( int i ) = <t> proxy;
	}

	abstract method in serial<<t>><array_cursor>
	{
		[final] ~open_cursor ( int )( array_cursor );  

		[final] ~move_cursor ( array_cursor [upd] );

		[final] ~flip_cursor ( array_cursor [upd] ); 

		[final] ~use_object ( array_cursor ) = <t> proxy; 
	}
}


