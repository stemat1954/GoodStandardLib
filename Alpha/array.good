
page array in AlphaByGood


nom type array_cursor = <'2'><int>tuple;


type <t>array from ( indexed<<t>>, serial<<t>><array_cursor> ) -- compatible and conventional per <t>
{{
	An array<t> is a resizable object set.  Objects are
	uniform and logically contiguous in memory.

	<t> is the symbolic object type. The adhoc type must
	be a complete type.  
		
	Methods that require a given index quit if the index is
	invalid. A valid index is between zero and count
	(inclusive).  index = count is a valid insertion index.

	If given index is valid, :insert always works provided 
	there is available memory, and :delete always works by 
	ignoring attempts to remove too many objects.

	Note: delete without an index (default) when array is
	empty doesn't do anything.

	Inserting and deleting at the end of an array is most
	efficient.

	An array can be configured from any type <t> but some
	methods are type dependent.

	An array is portable if <t> is portable.  <t> formats
	are given as extras.

	An array cursor is bidirectional and represented by
	a pair of ints.  One int carries the current position,
	while the other carries step.  If step is zero, the 
	cursor is inoperable.


}}
{
	nom type t_array = <<t>>array;

	general method 
	{
		begin ( int reserve [opt] ); 

		begin ( t_array other [upd] );	-- take 

		insert [upd]( int i [opt], int q );				-- q null objs at i (end)

		insert [upd]( int i [opt] ) = <t> proxy [init];  -- one null obj at i (end), return access

		delete [upd]( int i [opt], int q [opt] );	-- q (1) objs at i (end)

		resize [upd]( int q );				-- insert or delete at end, new count = q

		shrink [upd];						-- release unused memory
	}
	
	general method -- similar in indexed<<t>>
	{
		count ()( int );  

		use_object ( int i ) = <t> proxy [eval,init];
	}

	general method  -- <t> dependent
	{
		begin ( t_array other );							-- with <t> copy
		begin ( t_array other ) with copier ( <t> )( <t> );	-- with copier

		begin ( mediator [upd], expr fex )()( extra );		
		store [eval]( mediator [upd], expr fex )()( extra );

		insert [upd]( int i [opt], int q [opt], t_array other, int j [opt] );										-- with <t> copy: q (1) objs from other at j (0) to i (end) 
		insert [upd]( int i [opt], int q [opt], t_array other, int j [opt] ) with copier ( <t> )( <t> );			-- with copier:  ditto
		insert [upd]( int i [opt], int q [opt], t_array other [upd], int j [opt] );									-- with <t> take: ditto
		insert [upd]( int i [opt], int q [opt], t_array other [upd], int j [opt] ) with taker ( <t> [upd] )( <t> );	-- with taker:  ditto

		copy [eval]( int i [opt] )( <t> obj );								-- with <t> copy: one obj at i (end) to obj
		copy [eval]( int i [opt] )( <t> obj ) with copier ( <t> )( <t> );	-- with copier: ditto

		take [upd]( int i [opt] )( <t> obj );									-- with <t> taker: one obj at i (end) to obj
		take [upd]( int i [opt] )( <t> obj ) with taker ( <t> [upd] )( <t> );	-- with taker: ditto

		rank [eval]( <t> )( int i, bool unique ) with sorter ( <t> a, <t> b )( bool ); -- find ordered insertion point
	}

	abstract method in indexed<<t>>
	{
		[final] ~count ()( int n );
		
		[final] ~use_object ( int i ) = <t> proxy;
	}

	abstract method in serial<<t>><array_cursor>
	{
		[final] ~open_cursor ( int )( array_cursor );  

		[final] ~move_cursor ( array_cursor [upd] );

		[final] ~flip_cursor ( array_cursor [upd] ); 

		[final] ~use_object ( array_cursor ) = <t> proxy; 
	}
}


