
page tuple in AlphaByGood


type <#><t>tuple from indexed<<t>> -- compatible and conventional per <t>
{{
	A <#><t>tuple is a dimensioned n-tuple.

	<#> is the symbolic dimension. <t> is the symbolic 
	object type. The adhoc type must be a complete type.

	Since object count is known at compile time, implemen-
	tation can be optimized.

	A tuple can be constructed from any type <t> but some
	methods are type dependent.

	A tuple is portable if <t> is portable.  <t> formats
	are given as extras.
	
}}
{
	nom type nt_tuple = <<#>><<t>>tuple;

	general 
	{
		begin;	-- all objects null
		
		begin ( nt_tuple other [upd] );  -- take
	}

	general -- similar in indexed<<t>>
	{
		use_object ( int i ) = <t> proxy [eval,init]; 
	}

	general -- <t> dependent
	{
		begin ( <t> seed );								-- with <t> copy
		begin ( <t> seed ) with copier ( <t> )( <t> );	-- with copier

		begin ( nt_tuple other );								-- with <t> copy
		begin ( nt_tuple other ) with copier ( <t> )( <t> );	-- with copier

		begin ( translator [upd], expr fex )()( extra );  -- fread
		fwrite ( translator [upd], expr fex )()( extra );
	}

	abstract in indexed<<t>>
	{
		[final]	~count ()( int n );

		[final] ~use_object ( int i ) = <t> proxy;
	}
}

