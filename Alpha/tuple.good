
page tuple in AlphaByGood


type <t>tuple<#> from <<t>>set -- compatible and conventional per <t>
{{
	A <t>tuple<#> is a fixed-size object set, aka n-tuple.

	<#> is the symbolic dimension. <t> is the symbolic 
	object type. The adhoc type must be a complete type.

	Since object count is known at compile time, implemen-
	tation can be optimized.

	A tuple can be constructed from any type <t> but some
	methods can only be called with a type dependent co-
	routine.  See stock dialect for standard coroutines.

	Note: This technique verifies type compatibility and
	adds flexibility.

	Example:

	<int>tuple<'3'> point:begin( zero ) with std_copy<int>;
}}
{
	general 
	{
		begin;	-- all objects null
		
		begin ( <<t>>tuple<<#>> other [upd] );  -- move
	}

	general -- similar in <<t>>set
	{
		use_object ( int i ) = <t> proxy [eval,init]; 
	}

	general -- <t> dependent with coroutine
	{
		begin ( <t> seed ) with copy ( <t> )( <t> );	-- replicate
		begin ( <<t>>tuple<<#>> other )  with copy ( <t> )( <t> );
		begin ( message [upd], expr fex ) with fread ( message [upd], expr fex )( <t> ); 
		begin ( message [upd], expr fex )()( extra ) with fread ( message [upd], expr fex )( <t> )( extra ); 

		fwrite ( message [upd], expr fex ) with fread ( message [upd], expr fex )( <t> ); 
		fwrite ( message [upd], expr fex )()( extra ) with fread ( message [upd], expr fex )( <t> )( extra ); 
	}

	abstract in <<t>>set
	{
		[final]	~count ()( int n );

		[final] ~use_object ( int i ) = <t> proxy;
	}
}

