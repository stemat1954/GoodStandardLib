
page tuple in alpha@good


type tuple<#><t> from set<<t>> -- compatible and conventional per <t>
{{
	A tuple<#><t> is a fixed-size object array.

	<#> is the symbolic tuple dimension. <t> is the symbolic
	object type. The adhoc type must be a complete type.

	Since object count is known at compile time, implemen-
	tation can be optimized.

	<t> dependent methods supporting tuple initialization
	and portability are provided and segregated in a 
	seperate general group: 
	
		:load by copy and replicate depends on <t>:begin( <t> )

		:load by relay depends on <t>:begin( <t> [upd] )

		:load by fread depends on <t>:begin( message... )

		:fwrite depends on <t>:fwrite( message... )

	NOTE:  <t> dependent compilation errors aren't 
	detected until alpha is translated to sub-alpha.
	
}}
{
	general 
	{
		begin;	-- all objects null
	}

	general -- similar in set<<t>>
	{
		use_object ( int i ) = <t> proxy [eval,upd]; 
	}

	general -- <t> dependent
	{
		load ( <t> seed );	-- replicate

		load ( tuple<<#>><<t>> other ); -- copy 

		load ( tuple<<#>><<t>> other [upd] ); -- relay 

		load ( message [upd], expr fex );   -- fread
		load ( message [upd], expr fex )()( extra ); -- fread 

		fwrite ( message [upd], expr fex ); 
		fwrite ( message [upd], expr fex )()( extra ); 
	}

	abstract in set<<t>>
	{
		[final]	~count ()( int n );

		[final] ~use_object ( int i ) = <t> proxy;
	}
}

