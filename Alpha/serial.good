
page serial in AlphaByGood

type serial_access<t><c> [incomplete] -- intrinsic
{{
	serial_access<t><c> is a base type for generic object 
	collections that can be accessed serially.
		
	<t> is the symbolic object type and <c> is the symbolic 
	cursor type. 
	
	Collections that derive from serial_access<t><c> manage
	an ordered set of objects where individual objects are
	accessed in serial order using a bespoke cursor.

	Access to the collection starts by opening a cursor	
	positioned at one end of the logical sequence. The 
	cursor moves toward the other end in increments or 
	steps.  A positive or negative step determines 
	direction and resolution of the cursor. 
	
	Generally, a serial_access cursor must have a final 
	inoperable state that doesn't provide access to any
	object. The inoperable state must be distinguishable
	from null and an inoperable cursor must be accepted by
	all	methods.

	:open_cursor( step ) creates an original cursor placed 
	at one end of the sequence.  If step is positive, the 
	cursor is placed on the first object and moves toward
	the last.  If step is negative, the cursor is placed on 
	the last object and moves toward the first.  step = 0 
	is invalid.  The default step is one.

	Note: If a collection doesn't support step < 0 or |step|
	> 1,  the output cursor is inoperable.

	:move_cursor updates the position of a given cursor.
	
	:flip_cursor reverses the direction of a given cursor.

	Note: If a cursor can't be flipped, the cursor will 
	become inoperable.

	:use_object returns access to the object referenced by 
	a given cursor. If the cursor is inoperable, the proxy
	will be void.

	A serial_access collection can be scanned in a Good 
	for loop.
}}
{
	general
	{
		begin;

		open_cursor ( int step [opt] )( <c> );

		move_cursor ( <c> [upd] );

		flip_cursor ( <c> [upd] );

		use_object ( <c> ) = <t> proxy;
	}


	abstract  -- recap as [tbd]
	{
		~open_cursor ( int )( <c> );  

		~move_cursor ( <c> [upd] );

		~flip_cursor ( <c> [upd]);

		~use_object ( <c> ) = <t> proxy; 
	}

}



