
page float in AlphaByGood

{{
	fp2 and fp10 are two distinct floating point types 
	with esentially the same api. 
	
	Note: fp2 and fp10 are NOT adhoc configurations of a 
	single generic type.

	See math.good for built-in functional subroutines
	for numeric types.

}}


enum type fp_const ( 'min', 'max', 'epsilon', 'infinity', 'nan' );



type fp2 -- elementary, compatible, conventional
{{
	fp2 is a base-2 floating point number.  
	
	fp2 numbers can exactly represent any number that is
	a power of two, subject to inherent limits of exponent
	and fraction (mantissa).
}}
{

	general
	{
		begin ( expr vex [opt] );	-- numeric expr, default = 0

		begin ( fp_const vex );

		begin ( fp2 x );  -- copy

		begin ( fp10 x );  -- fp10 conversion

		begin ( int n );  -- int conversion

		begin<#n> ( word<<#n>> w, expr fex );	-- word conversion


		begin ( mediator [upd], expr fex );	 

		store ( mediator [upd], expr fex );	


		is_equal? ( fp2 x )( bool );
		
		is_before? ( fp2 x )( bool );	

		is_less? ( fp2 x )( bool );

		is_precise? ( fp2 x )( bool );			-- v/x is not fractional

		
		set [upd]( fp2 x );						-- v <= x (intrinsic assign)

		to_int [eval]()( int n );				-- n <= v (int conversion, if v not fractional)

		sgn [eval]()( int s );					-- s <= {-1,0,1} (sign) 


		add [upd]( fp2 x );						-- v <= v + x (add)	
		add [eval]( fp2 x )( fp2 y );	

		sub [upd]( fp2 x );						-- v <= v - x (subtract)
		sub [eval]( fp2 x )( fp2 y );

		mul [upd]( fp2 x );						-- v <= v * x (multiply)
		mul [eval]( fp2 x )( fp2 y );		

		div [upd]( fp2 x );						-- v <= v / x ( divide)
		div [eval]( fp2 x )( fp2 y );

		pow [upd]( fp2 x );						-- v <= v ^ x (power,real)
		pow [eval]( fp2 x )( fp2 y );

		pow [upd]( int n, int d );				-- v <= v ^ (n/d) (power,rational) 
		pow [eval]( int n, int d )( fp2 y );

		scl [upd]( int n );						-- v <= v * ( 2 ^ n ) (scale)
		scl [eval]( int n )( fp2 y );

		fma [upd]( fp2 m, fp2 b );				-- v <= ( m * v ) + b  (fused mul add, linear transform) 
		fma [eval]( fp2 m, fp2 b )( fp2 y );

		dis [upd]( fp2 x );						-- v <= | v - x | (distance, absolute diff)
		dis [eval]( fp2 x )( fp2 y );

		neg [upd];								-- v <= -v (negate)		
		neg [eval]()( fp2 y );

		abs [upd];								-- v <= |v| (abs value)
		abs [eval]()( fp2 y );

		rpu [upd]( fp2 x [opt] );				-- v <= v/x snap up/more (round to precision up)	
		rpu [eval]( fp2 x [opt] )( fp2 y );

		rpd [upd]( fp2 x [opt] );				-- v <= v/x snap down/less (round to precision down) 
		rpd [eval]( fp2 x [opt] )( fp2 y );

		rpi [upd]( fp2 x [opt] );				-- v <= v/x snap toward zero (round to precision in)
		rpi [eval]( fp2 x [opt] )( fp2 y );

		rpo [upd]( fp2 x [opt] );				-- v <= v/x snap away from zero (round to precision out)
		rpo [eval]( fp2 x [opt] )( fp2 y );
		
		rpn [upd]( fp2 x [opt] );				-- v <= v/x snap closest (round to precision near, .5 round out)
		rpn [eval]( fp2 x [opt] )( fp2 y );	

		rpn [upd]( fp2 x [opt] ) with rh ( fp2 v, fp2 x )( fp2 y );	-- v <= v/x snap closest (round to precision near, with .5 co-routine) 
		rpn [eval]( fp2 x [opt] )( fp2 y ) with rh ( fp2 v, fp2 x )( fp2 y );
	}

}


type fp10 -- elementary, compatible, conventional
{{
	fp10 is a base-10 floating point number.  
	
	fp10 numbers can exactly represent any number that is
	a power of ten, subject to inherent limits of exponent
	and fraction (mantissa).
}}
{

	general
	{
		begin ( expr vex [opt] );	-- numeric expr, default = 0

		begin ( fp_const vex );

		begin ( fp10 x );  -- copy

		begin ( fp2 x );  -- fp2 conversion

		begin ( int n );  -- int conversion

		begin<#n> ( word<<#n>> w, expr fex );	-- word conversion


		begin ( mediator [upd], expr fex );	 

		store ( mediator [upd], expr fex );	


		is_equal? ( fp10 x )( bool );
		
		is_before? ( fp10 x )( bool );	

		is_less? ( fp10 x )( bool );

		is_precise? ( fp10 x )( bool );			-- v/x is not fractional

		
		set [upd]( fp10 x );					-- v <= x (intrinsic assign)

		to_int [eval]()( int n );				-- n <= v (int conversion, if v not fractional)

		sgn [eval]()( int s );					-- s <= {-1,0,1} (sign) 


		add [upd]( fp10 x );					-- v <= v + x (add)	
		add [eval]( fp10 x )( fp10 y );	

		sub [upd]( fp10 x );					-- v <= v - x (subtract)
		sub [eval]( fp10 x )( fp10 y );

		mul [upd]( fp10 x );					-- v <= v * x (multiply)
		mul [eval]( fp10 x )( fp10 y );		

		div [upd]( fp10 x );					-- v <= v / x ( divide)
		div [eval]( fp10 x )( fp10 y );

		pow [upd]( fp10 x );					-- v <= v ^ x (power,real)
		pow [eval]( fp10 x )( fp10 y );

		pow [upd]( int n, int d );				-- v <= v ^ (n/d) (power,rational) 
		pow [eval]( int n, int d )( fp10 y );

		scl [upd]( int n );						-- v <= v * ( 2 ^ n ) (scale)
		scl [eval]( int n )( fp10 y );

		fma [upd]( fp10 m, fp10 b );			-- v <= ( m * v ) + b  (fused mul add, linear transform) 
		fma [eval]( fp10 m, fp10 b )( fp10 y );

		dis [upd]( fp10 x );					-- v <= | v - x | (distance, absolute diff)
		dis [eval]( fp10 x )( fp10 y );

		neg [upd];								-- v <= -v (negate)		
		neg [eval]()( fp10 y );

		abs [upd];								-- v <= |v| (abs value)
		abs [eval]()( fp10 y );

		rpu [upd]( fp10 x [opt] );				-- v <= v/x snap up/more (round to precision up)	
		rpu [eval]( fp10 x [opt] )( fp10 y );

		rpd [upd]( fp10 x [opt] );				-- v <= v/x snap down/less (round to precision down) 
		rpd [eval]( fp10 x [opt] )( fp10 y );

		rpi [upd]( fp10 x [opt] );				-- v <= v/x snap toward zero (round to precision in)
		rpi [eval]( fp10 x [opt] )( fp10 y );

		rpo [upd]( fp10 x [opt] );				-- v <= v/x snap away from zero (round to precision out)
		rpo [eval]( fp10 x [opt] )( fp10 y );
		
		rpn [upd]( fp10 x [opt] );				-- v <= v/x snap closest (round to precision near, .5 round out)
		rpn [eval]( fp10 x [opt] )( fp10 y );	

		rpn [upd]( fp10 x [opt] ) with rh ( fp10 v, fp10 x )( fp10 y );	-- v <= v/x snap closest (round to precision near, with .5 co-routine) 
		rpn [eval]( fp10 x [opt] )( fp10 y ) with rh ( fp10 v, fp10 x )( fp10 y );
	}

}

