
page ascii in alpha@good


type ascii from enumerated  
{{
	Ascii objects represent individual characters in a
	source expr.  

	Ascii objects (characters) are enumerated objects
	that conform to industry standards.  There are 256 
	possible characters.  The first 128 ( 0 - 127 ) are 
	consistent with ANSI standard (1967). Characters 128 -
	255 are non-standard, i.e. extended.

	Note:  See https://en.wikipedia.org/wiki/ASCII

	Ascii objects are typically extracted from source exprs,
	but source exprs are not actually comprised of ascii
	objects.  
	
	Since ascii objects are both extracted from exprs and
	identified by exprs, things can get a little circular 
	and confusing.  It's important to remember that standard
	ascii labels are always printable, but may identify 
	characters that aren't. 
	
	For example, the expr 'cat' is comprised of 3 chars
	that, when extracted as ascii objects, are identified 
	by the labels 'c', 'a', and 't'. 

	The expr 'hi^013' is comprised of 3 chars that, when
	extracted as ascii objects, are identified by the 
	labels 'h', 'i', and 'CR'.  Note that character 13
	(carriage return) is not printable, but the label is.

	Note:  Caret sub-expressions are generally used to 
	insert non-printable standard characters, but they can
	also be used to insert non-standard extended characters. 


	standard labels 

	  0  'NUL' 'SOH' 'STX' 'ETX' 'EOT' 'ENQ' 'ACK' 'BEL'   
	  8  'BS'  'TAB' 'LF'  'VT'  'FF'  'CR'  'SO'  'SI'	
	 16  'DLE' 'DC1' 'DC2' 'DC3' 'DC4' 'NAK' 'SYN' 'ETB'	
	 24  'CAN' 'EM'  'SUB' 'ESC' 'FS'  'GS'  'RS'  'US'	
	 32  'SP'  '!'   '"'   '#'   '$'   '%'   '&'   '^''	
	 40  '('   ')'   '*'   '+'   ','   '-'   '.'   '/'		
	 48  '0'   '1'   '2'   '3'   '4'   '5'   '6'   '7'		
	 56  '8'   '9'   ':'   ';'   '<'   '='   '>'   '?'		
	 64  '@'   'A'   'B'   'C'   'D'   'E'   'F'   'G'		
	 72  'H'   'I'   'J'   'K'   'L'   'M'   'N'   'O'		
	 80  'P'   'Q'   'R'   'S'   'T'   'U'   'V'   'W'		
	 88  'X'   'Y'   'Z'   '['   '\'   ']'   '^^'  '_'		
	 96  '!'   'a'   'b'   'c'   'd'   'e'   'f'   'g'		
	104  'h'   'i'   'j'   'k'   'l'   'm'   'n'   'o'		
	112  'p'   'q'   'r'   's'   't'   'u'   'v'   'w'		
	120  'x'   'y'	'z'   '{'   '|'   '}'   '~'   'DEL'	



	Standard printable characters have labels that print as
	the character they label (e.g. the label for character A 
	is 'A').

	Standard unprintable characters have labels that print as
	standard mnemonic strings (e.g. the label for carriage 
	return is 'CR' ). 
	
	Extended characters have neutral decimal value labels
	that print in different ways (e.g. the label for 
	extended character 255 is '^255' and how it prints is
	device dependent).

	Most classification methods apply only to standard char-
	acters. That is, they'll never indicate a true condition
	for extended characters.
		
	select ( c ) -- type ascii
	{
		case ( 'NUL' );

		case ( 'a' );

		case ( '^128' );
	}

	An ascii object can be initialized from an int code
	value, but be careful about using int value expressions
	to specify the code value.

	ascii c:begin( 'A' );	-- ok, 'A' is label for char code 65

	ascii c:begin( '65' );  -- wrong! this calls label expr method
							-- and '65' is not a valid label

	ascii c:begin( '65' as int );  -- ok, this calls int method

	ascii c:begin( '^065' );  -- ok, but cryptic, use 'A' instead

	An ascii object is portable but applications are
	limited.  The primary fex is either 'label' (as expr)
	or 'code' (as int) and an extra fex specifies how to 
	format the label or code.
}}
{

	general	
	{
		begin ( expr label );			-- vex  

		begin ( int code );				-- enum value
		
		begin ( ascii other );			-- copy

		begin ( message [upd], expr fex )()( extra );	--fread

		fwrite ( message [upd], expr fex )()( extra );


		equal? ( ascii other )( bool ) ;

		before? ( ascii other )( bool );


		label = expr proxy [eval];

		standard? ()( bool );		-- not extended

		extended? ()( bool );		-- not standard

		control? ()( bool );		-- not printable, not space

		letter? ()( bool );			-- either case

		uc_letter? ()( bool );		-- uppercase

		lc_letter? ()( bool );		-- lowercase

		bin_digit? ()( bool );		-- 0-1

		dec_digit? ()( bool );		-- 0-9

		hex_digit? ()( bool );		-- 0-9 aA-fF

		punctuation? ()( bool );	-- !"#%&'()*,-./:;?@[\]_{}

		symbol? ()( bool );			-- $+-<>^!|~

		in? ( expr )( bool );

	}
}
