
page serial_set in alpha@good

type serial_set<t><c> [incomplete] -- intrinsic
{{
	serial_set<t> is a generic base type for object sets
	that provide serial access to objects in the set.
		
	<t> is the symbolic object type and <c> is the symbolic 
	cursor type. 
	
	Sets that derive from serial_set<t><c> manage an ordered
	set of objects.  Individual objects are accessed in 
	serial order using a bespoke cursor.

	Access to a serial set starts by opening a cursor
	positioned at either end of the set. The cursor moves
	toward the other end in increments or steps.  A 
	positive or negative step determines direction and 
	resolution of the cursor. 
	
	Generally, a serial cursor must have a final inoperable
	state that doesn't provide access to any object. An in-
	operable cursor must be accepted by all methods.

	:open_cursor( step ) creates an original cursor placed 
	at either end of the set.  If step is positive, the 
	cursor is placed on the first object and moves toward
	the last.  If step is negative, the cursor is placed on 
	the last object and moves toward the first.  step = 0 
	is invalid.  The default step is one.

	Note: If a set doesn't support step < 0 or |step|> 1, 
	the output cursor is inoperable.

	:move_cursor updates the position of a given cursor.
	
	:flip_cursor reverses the direction of a given cursor.

	Note: If a cursor can't be flipped, the cursor will 
	become inoperable.

	:use_object returns access to the object referenced by 
	a given cursor. If the cursor is inoperable, the proxy
	will be void.

	serial sets can be scanned in a Good for loop.
}}
{
	general
	{
		begin;

		open_cursor ( int step [opt] )( <c> );

		move_cursor ( <c> [upd] );

		flip_cursor ( <c> [upd] );

		use_object ( <c> ) = <t> proxy;
	}


	abstract  -- [tbd] in subtype (not fundamental)
	{
		~open_cursor ( int )( <c> );  

		~move_cursor ( <c> [upd] );

		~flip_cursor ( <c> [upd]);

		~use_object ( <c> ) = <t> proxy; 
	}

}



