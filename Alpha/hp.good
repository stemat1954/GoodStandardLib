
page hp in AlphaByGood



type hp<t>   -- intrinsic
{{
	An hp<t> object is a "heap pointer" object that 
	creates and/or accesses an object in heap memory.

	An hp is used to create an object at runtime in heap
	memory. The type of object created must be a complete
	type, but in general, the hp adhoc type can be any 
	related (possibly incomplete) type.  

	Logically, an hp is a runtime reference object. That
	is, the binding of hp to object is made at runtime.
	In this sense, hps are similar to proxies.  However, 
	hps are first class objects with methods (proxies
	aren't) and access to an hp's bound object requires
	an explicit accessor call, while access to a proxy's
	bound object is implicit.
	
	The hp object accessor method is called :use_object. 
	Like other accessors, :use_object returns a result
	proxy which can be used in any object context as a 
	reference to the heap object. Thus, logically, there 
	are two levels of indirection to get to the object.
	
	Note:  In a sense, :use_object converts an hp into a 
	proxy. The conversion is optimized and may in fact be
	virtual.
	
 	The proxy returned by :use_object has unspecified per-
	mission, so permissison must be stated in the call to
	gain [upd] or [init] access.  

	Note: universal methods :as<t> and :as_actual<t> will
	set permission if a type change is needed at the same 
	time.

	The heap object bound to an hp is created when the hp 
	is initialized. The new heap object is null and it must
	be initialized before it can be used.  
	
	:begin returns an [init] proxy which allows the new
	null object to be initialized immediately:
	
		hp<thing> hpt begin:begin; 

	This expression creates and initializes an hp named hpt,
	bound to an object of adhoc type thing, then initializes
	the new heap object using default :begin.  

	Note:  It's important to distinquish between a null hp
	and a possibly null heap object accessed by the hp.  A 
	null hp can't be used, but a properly intialized hp 
	can always be used and it may or may not access a null
	object.
	
	An hp can be initialized by copying an existing compat-
	ible hp. When hps are copied, the new hp accesses an 
	external subobject of the heap object.
	
	The object accessed by an hp is automatically deleted
	when all hps that reference the object are deleted.
	
	Note:  It's common to say that the object accessed by
	an hp is "reference counted."

	Note:  Copying hps and reference counting is thread-
	safe. hps are essential for sharing objects between
	threads.

	An existing hp is compatible with another hp if the
	two adhoc hp types are related.
	
	For example:


	type thing
	{
		general method foo [eval];
	}

	type widget from thing
	{
		general method goo [eval];
	}

	subroutine foo
	{
		hp<widget> wp:begin:begin; -- new hp to actual widget
		hp<thing> tp:begin( wp );  -- copy wp

		wp:use_object:foo;	-- ok (foo is inherited)
		wp:use_object:goo;	-- ok

		tp:use_object:foo;	-- ok
		tp:use_object:goo;	-- error! (goo not a method of thing)
		tp:use_object:as<widget>:goo;  -- ok after type translation
	}
		

	In general, two types are related and compatible if they
	occur in a common type hierarchy.

	      A
	     / \
		B   C

	In this (bottom-up) hierarchy, A derives from B and C.
	A, B, and C are all related.  Note that B and C are
	related through A, but are otherwise not related.

	If ap is an hp to an actual object of type A,

		hp<A> ap:begin:begin;

	then 

		hp<B> bp:begin( ap );
		hp<C> cp:begin( ap );

		hp<B> bp2:begin( cp );
		hp<C> cp2:begin( bp );

	are all legit and refer to the same actual object bound
	to ap.

	This works because 

	  ap:use_object:as_base<B>
	  ap:use_object:as_base<C>
	  bp:use_object:as<A>
	  cp:use_object:as<A>
	  bp:use_object:as<C>
	  cp:use_object:as<B>

	are all legit and return valid proxies.

	hps can be used to create logically heterogenous arrays.
	They're also essential for creating dynamically linked
	object collections like trees, lists, and networks.
	
	hps are generally portable if <t> is portable.  The 
	portability message	must be configured with an open heap. 
	See type message for more info.  :fwrite disables the 
	pointer and any attempt to use it after calling :fwrite
	will disrupt the application.  Object formats are given
	as extras.

	hps can be compared using standard methods. Cross type
	comparisions are allowed, even if the hps are copy-
	incompatible.  Comparisons are based on heap address, so
	equal hps reference the same heap object.  Furthermore, if
	a:before?(b) is false and b:before?(a) is false, then a 
	and b are par equal ( "a |par| b" is true).
		
	Note:  Par equality is persistent provided hps are properly
	restored using techniques already described. However, 
	ordinality is a completely transient property and any 
	ordered collection of hps is only ordered for a single 
	runtime session.

	Note: In some applications, it may be preferable to
	compare hps by passing the comparison on to the common
	object.  A general solution is too complicated.  For
	particular scenarios, an application can define a new
	type that encapsulates an hp and provides the desired
	pass-through methods.


}}
{
	general 
	{
		begin = <t> proxy [init];			-- access new <t> object, complete <t> (may quit)
		
		begin<xt> = <xt> proxy [init];		-- access new <xt> object, <xt> related to <t> (may quit)

		begin<xt> ( hp<<xt>> );				-- copy compatible hp, <xt> related to <t> (may quit)

		begin<xt> ( hp<<xt>> [upd] );		-- take compatible hp, <xt> related to <t> (may quit)

		begin ( typename ) = <t> proxy [init];	-- access new <t> object, typename:is<t>? must be true (may quit)


		use_object = <t> proxy;				-- always works (never void)

		is_equal<xt>? ( hp<<xt>> )( bool );

		is_before<xt>? ( hp<<xt>> )( bool );
	}

	general -- <t> dependent portability
	{
		begin ( message [upd], expr fex )()( extra );		-- fread

		fwrite [eval]( message [upd], expr fex )()( extra );
	}
}

