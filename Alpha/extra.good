
page extra in alpha@good


type extra from uniform_set<object> -- intrinsic, restricted
{{
	extra is an adjective type that refers to a uniform
	list of	unspecified objects given to a procedure after
	inputs and outputs.  
	
	An extra list is not an array<object> because type 
	object is not complete.  

	The compiler automatically creates and initializes an 
	extra list.
		
	Applications must use runtime methods to determine the
	actual type of extras contained in the list. Generally,
	a procedure that accepts extras must also receive some
	kind of auxiliary input that maps the listed objects.

	An extra list is a first class object that can be given
	as a regular input to another procedure.  If an extra 
	list is forwarded as an extra, the compiler will 
	consolidate the given extra list into a new extra list
	along with any other objects given.  

	Some applications may need to delete objects before
	forwarding.  :delete removes a specified number of 
	objects in given order (fifo).  

	@given\extra:use_object( i )[eval]:as<thing>
	@given\extra:use_object( i )[upd]:as<thing>
	@given\extra:use_object( i ):as_actual<thing>
}}
{
	general
	{
		delete [upd]( int q [opt] );  -- q objects from front
	}

	general  -- similar in uniform_set<t>
	{
		count ()( int );

		use_object ( int i ) = object proxy; 
	}

	abstract in uniform_set<object>
	{
		[final] ~count ()( int n );

		[final] ~use_object ( int i ) = object proxy;
	}
}
