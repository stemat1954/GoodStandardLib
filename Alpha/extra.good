
page extra in alpha@good


type extra from <object>set -- intrinsic, restricted
{{
	extra is an adjectival type that refers to a uniform
	set of unspecified objects given to a procedure after
	inputs and outputs.  
	
	Note: an extra list is logically similar to an <object>
	array except type object isn't complete (so it can't be
	an array element).  

	The compiler automatically creates and initializes an 
	extra list.
		
	Applications must use runtime methods to determine the
	actual type of extras contained in the list. Generally,
	a procedure that accepts extras must also receive some
	kind of auxiliary input that maps the listed objects.

	An extra list is a first class object that can be given
	as a regular input to another procedure.  If an extra 
	list is forwarded as an extra, the compiler will 
	consolidate the given extra list into a new extra list
	along with any other objects given.  

	Some applications may need to delete objects before
	forwarding.  :delete removes a specified number of 
	objects in given order (fifo).  

	@given\extra:use_object( i )[eval]:as<thing>
	@given\extra:use_object( i )[upd]:as<thing>
	@given\extra:use_object( i ):as_actual<thing>
}}
{
	general
	{
		delete [upd]( int q [opt] );  -- q objects from front
	}

	general  -- similar in <object>set
	{
		count ()( int );

		use_object ( int i ) = object proxy; 
	}

	abstract in <object>set
	{
		[final] ~count ()( int n );

		[final] ~use_object ( int i ) = object proxy;
	}
}
