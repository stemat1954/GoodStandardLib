
page access in alpha@good

{{
	This page defines 2 adaptable and generic base types:

	direct_access<t>
	serial_acess<t><c>

	Unlike most alpha types, these types don't have any
	fundamental methods.  All methods are complete as written.
}}


type direct_access<t> [incomplete] -- intrinsic
{{
	direct_access<t> is a base type for generic object
	collections that support direct access to objects.
		
	<t> is the symbolic object type. 

	Objects that derive from direct_access<t> manage a
	countable collection of objects.  Individual objects 
	can be directly	accessed by a numeric position
	index.

	Valid indexes range from zero to count - 1.

	:object returns an indefinite proxy. If the index is out
	of range, the proxy will be void.

	Direct access objects are naturally ordered by index,
	but there is no presumption that objects with a	lesser
	index are "before" or "less" than those with a greater
	index.

	direct_access collections can be scanned in a for-loop.
}}
{
	general 
	{
		begin
		{
		}

		count ()( int n )
		{
			ao:~count()( n );
		}

		object ( int i ) = <t> proxy ~o
		{
			~o -> ao:~object( i );
		}
	}

	abstract -- [tbd] in subtype (not fundamental)
	{
		~count ()( int );	

		~object ( int i ) = <t> proxy; 
	}
}



type serial_access<t><c> [incomplete] -- intrinsic
{{
	serial_access<t><c> is a base type for generic object
	collections that support serialized access to objects.

	<t> is the symbolic object type and <c> is the symbolic
	cursor type.

	Objects that derive from serial_access<t><c> manage an
	ordered collection of objects.  Individual objects can
	be accessed in order using a bespoke cursor.

	In general, access to objects starts by opening a cursor
	positioned at either end of the collection. The	cursor
	moves toward the other end in increments or steps. A 
	positive or negative step determines direction and 
	resolution of the cursor. 
	
	Generally, a cursor must have an inoperable or final 
	state that doesn't provide access to a collection object.
	A cursor in final state must be accepted by all methods.

	:open_cursor( step ) creates an original cursor placed 
	at either end of the set.  If step is positive, the 
	cursor is placed on the first object and moves toward
	the last.  If step is negative, the cursor is placed on 
	the last object and moves toward the first.  step = 0 
	is invalid.  The default step is one.

	:move_cursor updates the position of a given cursor.
	
	:flip_cursor reverses the direction of a given cursor.

	:object accesses a collection object given a cursor.  
	If the cursor is inoperable, the result is void.

	serial_access collections can be scanned in a for-loop.
}}
{
	general
	{
		begin
		{
		}

		open_cursor ( int step [opt] )( <c> c )
		{
			if ( "is_null?( step )" ) ao:~open_cursor( '1' )( c )
			else if ( "step |=| zero" ) quit fault ( 'bug', 'invalid cursor step' )
			else ao:~open_cursor( step )( c );
		}

		move_cursor ( <c> c [upd] )
		{
			ao:~move_cursor( *c );
		}

		flip_cursor ( <c> c [upd] )
		{
			ao:~flip_cursor( *c )( ok );
		}  

		object ( <c> c ) = <t> proxy ~o
		{
			~o -> ao:~object( c );
		}
	}


	abstract  -- [tbd] in subtype (not fundamental)
	{
		~open_cursor ( int step )( <c> c );  

		~move_cursor ( <c> c [upd] );

		~flip_cursor ( <c> c [upd]);

		~object ( <c> c ) = <t> proxy; 
	}

}



